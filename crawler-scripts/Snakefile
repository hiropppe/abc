#!/usr/bin/env python3

import gzip
import sys
import tldextract

from collections import defaultdict
from pathlib import Path


DATA_DIR = Path(config["dataDir"])

TMP_DIR = config.get("temp", "./tmp")
shell("mkdir -p "+TMP_DIR)

CRAWLER = "heritrix"
CRAWLTIMELIMIT = config.get("crawlTimeLimit", "")
HERITRIXPATH = config["heritrixPath"]
HERITRIXURL = config.get("heritrixUrl", "https://localhost:8443")
HERITRIXUSER = config.get("heritrixUser", "admin:admin")
HERITRIXCONTACTUS = config["heritrixContactUs"]


def create_domain2hosts(hosts):
    ret = {}
    for host in hosts:
        # TODO don't merge blog sites
        if host.find(".blogspot.") >= 0 or host.find(".wordpress.") >= 0:
            key = host
        else:
            key = tldextract.extract(host).domain

        if key not in ret:
            ret[key] = []
        ret[key].append(host)
        # print("subdomain", key, host)
    return ret


def create_seed_dict(seeds):
    dic = defaultdict(list)
    for seed in seeds:
        ext = tldextract.extract(seed)
        key = ".".join([ext.subdomain, ext.domain, ext.suffix]).lstrip(".")
        dic[key].append(seed)
    return dic


# ================================== TARGET HOSTS ================================ #
warc_path = DATA_DIR / "warc"
crawled_hosts = set([d.name for d in warc_path.iterdir() if (d / "{:s}.warc.gz".format(CRAWLER)).exists()])
#crawled_hosts = set()
print(f"read hosts from warc dir={len(crawled_hosts):d}")

seeds = None
if config.get("seeds"):
    seeds = set(config["seeds"])
elif config.get("seeds_file"):
    with gzip.open(config["seeds_file"], "rt") as f:
        seeds = set(f.read().splitlines())

seed_dict = create_seed_dict(seeds)
seed_hosts = list(seed_dict.keys())

if config.get("brand_new_host"):
    hosts_to_crawl = list(set(seed_hosts) - crawled_hosts)
else:
    hosts_to_crawl = seed_hosts

print("#Total hosts=" + str(len(seed_hosts)), file=sys.stderr)
print("#Hosts to crawl=" + str(len(hosts_to_crawl)), file=sys.stderr)

hosts = sorted(hosts_to_crawl, key=lambda h: tldextract.extract(h).domain)

domain2hosts = create_domain2hosts(hosts)

#print("hosts", hosts)
#print("domain2hosts", domain2hosts)
#print("seed_dict", seed_dict)

# every shell command will run sync
shell.prefix("sync; set -euo pipefail; ")
#shell.prefix("set -euo pipefail; ")

OUTPUT = []
for host in hosts:
    OUTPUT.append(f"{DATA_DIR}/warc/{host}/heritrix.warc.gz")


rule all:
    input:
        expand("{target}", target=OUTPUT)


# ================================== CRAWLING ====================================== #

rule heritrix:
    output:
        f'{DATA_DIR}/warc/{{target}}/heritrix.warc.gz'
    params:
        seeds = lambda wild: "\\n".join(seed_dict[wild["target"]]),
        surt = lambda wild: "http://(" + tldextract.extract(wild["target"]).suffix + "," + tldextract.extract(wild["target"]).domain + ","
    shell:
        'echo hostname=$HOSTNAME; '

        'echo "curl -d \\"createpath={wildcards.target}&action=create\\" -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine"; '
        'curl --silent --output /dev/null --show-error --fail -d "createpath={wildcards.target}&action=create" -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine; '

        'echo "curl -d \\"action=teardown\\" -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine/job/{wildcards.target}"; '
        'curl --silent --output /dev/null --show-error --fail -d "action=teardown" -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine/job/{wildcards.target}; '

        'DIRNAME=$(mktemp -d "{TMP_DIR}/downloaded.{wildcards.target}.XXXXXX"); '
        'echo $DIRNAME;'

        'echo "cat ./crawler-beans.cxml | sed \\"s@http://contact.us/@{HERITRIXCONTACTUS}@g\\" | sed \\"s@http://seed.com/@{params.seeds}@g\\" | sed \\"s@http://(com,surt,@{params.surt}@g\\" > $DIRNAME/my-crawler-beans.cxml"; '
        'cat ./crawler-beans.cxml | sed "s@http://contact.us/@{HERITRIXCONTACTUS}@g" | sed "s@http://seed.com/@{params.seeds}@g" | sed "s@http://(com,surt,@{params.surt}@g" > $DIRNAME/my-crawler-beans.cxml; '

        'echo "curl -T $DIRNAME/my-crawler-beans.cxml -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine/job/{wildcards.target}/jobdir/crawler-beans.cxml"; '
        'curl --silent --output /dev/null --show-error --fail -T $DIRNAME/my-crawler-beans.cxml -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine/job/{wildcards.target}/jobdir/crawler-beans.cxml; '

        'echo "curl -d \\"action=build\\" -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine/job/{wildcards.target}"; '
        'curl --silent --output /dev/null --show-error --fail -d "action=build" -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine/job/{wildcards.target}; '

        'echo "curl -d \\"action=launch&checkpoint=latest\\" -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine/job/{wildcards.target}"; '
        'curl --silent --output /dev/null --show-error --fail -d "action=launch&checkpoint=latest" -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine/job/{wildcards.target}; '

        'sleep 10;'
        'echo "curl -d \\"action=unpause\\" -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine/job/{wildcards.target}"; '
        'curl --silent --output /dev/null --show-error --fail -d "action=unpause" -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine/job/{wildcards.target}; '

        'echo "Waiting for the warc.gz to be finished. TIMELIMIT={CRAWLTIMELIMIT}"; '
        'sleep 10;'
        'RUNTIME=0; INTERVAL=5; TIMED_OUT=0;'
        'while [ -f {HERITRIXPATH}/jobs/{wildcards.target}/latest/warcs/*warc.gz.open ] ;'
        '  do sleep 10 ;'
        '  RUNTIME=$((RUNTIME+INTERVAL)) ; '
        '  if [ "{CRAWLTIMELIMIT}" != "" ] ; then '
        '    if [ $RUNTIME -gt {CRAWLTIMELIMIT} ] ; then '
        '      echo "curl -d \\"action=pause\\" -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine/job/{wildcards.target}"; '
        '      curl --silent --output /dev/null --show-error --fail -d "action=pause" -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine/job/{wildcards.target}; '
        '      echo "curl -d \\"action=checkpoint\\" -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine/job/{wildcards.target}"; '
        '      curl --silent --output /dev/null --show-error --fail -d "action=checkpoint" -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine/job/{wildcards.target}; '
        '      TIMED_OUT=1;'
        '    fi ; '
        '  fi; '
        'done; '

        'if [ $TIMED_OUT -eq 0 ] ; then '
        '      echo "curl -d \\"action=checkpoint\\" -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine/job/{wildcards.target}"; '
        '      curl --silent --output /dev/null --show-error --fail -d "action=checkpoint" -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine/job/{wildcards.target}; '
        'fi ; '

        'echo "curl -d \\"action=terminate\\" -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine/job/{wildcards.target}"; '
        'curl --silent --output /dev/null --show-error --fail -d "action=terminate" -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine/job/{wildcards.target}; '
        'echo "curl -d \\"action=teardown\\" -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine/job/{wildcards.target}"; '
        'curl --silent --output /dev/null --show-error --fail -d "action=teardown" -k -u {HERITRIXUSER} --anyauth --location {HERITRIXURL}/engine/job/{wildcards.target}; '

        'echo "Job {wildcards.target} finished! Runtime: ${{RUNTIME}} sec"; '

        'find {HERITRIXPATH}/jobs/{wildcards.target} -type f -name "WEB-*.warc.gz" | xargs cat > {output}; '
